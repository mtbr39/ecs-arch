# -*- coding: utf-8 -*-
"""ipywidgets_trial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lu8IWFNoOUT-s3MZeDHGfVm3AkJT0CNy

#Interact : シンプルなウィジェット
"""

from __future__ import print_function
from ipywidgets import interact, interactive, fixed, interact_manual
import ipywidgets as widgets

def f(x):
    return x

interact(f, x=10);

interact(f, x=True);

interact(f, x='Hi there!');

@interact(x=True, y=1.0)
def g(x, y):
    return (x, y)

def h(p, q):
    return (p, q)

interact(h, p=5, q=fixed(20));

"""##Widget abbreviations : ウィジェットの詳細設定"""

interact(f, x=widgets.IntSlider(min=-10, max=30, step=1, value=10));

interact(f, x=(0,4));
interact(f, x=(0,8,2)); #min, max, step

interact(f, x=(0.0,10.0)); #いずれかがfloatならfloat
interact(f, x=(0.0, 10.0, 0.01));

#初期値
@interact(x=(0.0,20.0,0.5))
def h(x=5.5):
    return x

#ドロップダウンメニュー

interact(f, x=['apples','oranges']);
interact(f, x=[('one', 10), ('two', 20)]);
interact(f, x=widgets.Combobox(options=["Chicago", "New York", "Washington"], value="Chicago"));

"""#interactive : 再利用できるウィジェット"""

from IPython.display import display
def f(a, b):
    display(a + b)
    return a+b

w = interactive(f, a=10, b=20)
type(w)

w.children

display(w)

w.kwargs

"""#Disabling continuous updates : 継続的な更新の無効化"""

def slow_function(i):
    print(int(i),list(x for x in range(int(i)) if
                str(x)==str(x)[::-1] and
                str(x**2)==str(x**2)[::-1]))
    return

# Commented out IPython magic to ensure Python compatibility.
# %%time
# slow_function(1e6)

from ipywidgets import FloatSlider
interact(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));

##interact_manual : ボタンによる実行

#interactの場合
interact_manual(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5));

#interactiveの場合
slow = interactive(slow_function, {'manual': True}, i=widgets.FloatSlider(min=1e4, max=1e6, step=1e4))
slow

#continuous_update
interact(slow_function,i=FloatSlider(min=1e5, max=1e7, step=1e5, continuous_update=False));

"""#interactive_output : UI要素のレイアウト"""

a = widgets.IntSlider()
b = widgets.IntSlider()
c = widgets.IntSlider()
ui = widgets.HBox([a, b, c])
def f(a, b, c):
    print((a, b, c))

out = widgets.interactive_output(f, {'a': a, 'b': b, 'c': c})

display(ui, out)

"""#*observe : 相互に依存している引数"""

x_widget = FloatSlider(min=0.0, max=10.0, step=0.05)
y_widget = FloatSlider(min=0.5, max=10.0, step=0.05, value=5.0)

def update_x_range(*args):
    x_widget.max = 2.0 * y_widget.value
y_widget.observe(update_x_range, 'value')

def printer(x, y):
    print(x, y)
interact(printer,x=x_widget, y=y_widget);

"""#output.layout : ちらつきを防ぐ"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from ipywidgets import interactive
import matplotlib.pyplot as plt
import numpy as np

def f(m, b):
    plt.figure(2)
    x = np.linspace(-10, 10, num=1000)
    plt.plot(x, m * x + b)
    plt.ylim(-5, 5)
    plt.show()

interactive_plot = interactive(f, m=(-2.0, 2.0), b=(-3, 3, 0.5))
output = interactive_plot.children[-1]
output.layout.height = '350px'
interactive_plot